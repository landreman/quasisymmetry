#!/usr/bin/env python3

print()
print("Usage: "+__file__+" quasisymmetry_out.XXX.nc <index>")
print("Note that index is 0-based, not 1-based!")

import sys
if len(sys.argv) != 3:
    print("Error! 2 arguments required")
    exit(1)

filename = sys.argv[1]
try:
    index = int(sys.argv[2])
except:
    print("Unable to convert 2nd argument to an integer!")
    raise

def toString(ncVar):
    temp = [c.decode('UTF-8') for c in ncVar]
    return (''.join(temp)).strip()

from scipy.io import netcdf
f = netcdf.netcdf_file(filename,mode='r',mmap=False)
general_option = toString(f.variables["general_option"][()])
print("general_option: ",general_option)
if general_option=="single":
    print("Error! The supplied quasisymmetry_out file must be a grid scan or random scan.")
    f.close()
    exit(1)

order_r_option = toString(f.variables["order_r_option"][()])
nfp = f.variables["nfp"][()]
scan_eta_bar = f.variables["scan_eta_bar"][()]
scan_sigma_initial = f.variables["scan_sigma_initial"][()]
R0s = f.variables["scan_R0s"][()]
R0c = f.variables["scan_R0c"][()]
Z0s = f.variables["scan_Z0s"][()]
Z0c = f.variables["scan_Z0c"][()]
iotas = f.variables["iotas"][()]
max_elongations = f.variables["max_elongations"][()]
max_curvatures = f.variables["max_curvatures"][()]
axis_helicities = f.variables["axis_helicities"][()]
max_modBinv_sqrt_half_grad_B_colon_grad_Bs = f.variables["max_modBinv_sqrt_half_grad_B_colon_grad_Bs"][()]
standard_deviations_of_R = f.variables["standard_deviations_of_R"][()]
standard_deviations_of_Z = f.variables["standard_deviations_of_Z"][()]
min_R0s = f.variables["min_R0s"][()]
print('scan_R0c.shape: ',R0c.shape)
if order_r_option=='r2':
    scan_B2s = f.variables['scan_B2s'][()]
    scan_B2c = f.variables['scan_B2c'][()]
    r_singularities = f.variables["r_singularities"][()]
    d2_volume_d_psi2s = f.variables["d2_volume_d_psi2s"][()]
    B20_variations = f.variables["B20_variations"][()]

f.close()

N_scan = len(scan_eta_bar)
axis_nmax_plus_1 = R0c.shape[0]
if index >= N_scan:
    print("Error! index >= N_scan")
    exit(1)

print("order_r_option: ",order_r_option)
print("N_scan: ",N_scan)

print()
print("The run with index "+str(index)+" has the following properties:")
print(' eta_bar = {:.15g}'.format(scan_eta_bar[index]))
print(' sigma_initial = {:.15g}'.format(scan_sigma_initial[index]))
if order_r_option=='r2':
    print(' B2s = {:.15g}'.format(scan_B2s[index]))
    print(' B2c = {:.15g}'.format(scan_B2c[index]))
mystr = ' R0s ='
for j in range(axis_nmax_plus_1):
    mystr += " {:.15g}".format(R0s[j,index])
print(mystr)
mystr = ' R0c ='
for j in range(axis_nmax_plus_1):
    mystr += " {:.15g}".format(R0c[j,index])
print(mystr)
mystr = ' Z0s ='
for j in range(axis_nmax_plus_1):
    mystr += " {:.15g}".format(Z0s[j,index])
print(mystr)
mystr = ' Z0c ='
for j in range(axis_nmax_plus_1):
    mystr += " {:.15g}".format(Z0c[j,index])
print(mystr)
print()
print(" iota = {:.15g}".format(iotas[index]))
print(" max_elongation = {:.15g}".format(max_elongations[index]))
print(" max_curvature = {:.15g}".format(max_curvatures[index]))
print(" max_modBinv_sqrt_half_grad_B_colon_grad_B = {:.15g}".format(max_modBinv_sqrt_half_grad_B_colon_grad_Bs[index]))
print(" standard_deviation_of_R = {:.15g}".format(standard_deviations_of_R[index]))
print(" standard_deviation_of_Z = {:.15g}".format(standard_deviations_of_Z[index]))
print(" min_R0 = {:.15g}".format(min_R0s[index]))
print(" axis_helicity = {:.15g}".format(axis_helicities[index]))
if order_r_option=="r2":
    print(" r_singularity = {:.15g}".format(r_singularities[index]))
    print(" d2_volume_d_psi2 = {:.15g}".format(d2_volume_d_psi2s[index]))
    print(" B20_variation = {:.15g}".format(B20_variations[index]))
print()

newFilename = 'quasisymmetry_in'+filename[17:-3]+'.single'
print('Generating input file: ',newFilename)

import os.path

f=open(newFilename,'w')
f.write('! This file was generated by '+os.path.abspath(__file__)+'\n')
f.write('! from index '+str(index)+' in '+os.path.abspath(filename)+'\n')
f.write('&quasisymmetry\n')
f.write(' general_option="single"\n')
f.write(' resolution_option="adaptive"\n')
f.write(' verbose_option="all"\n')
f.write(' finite_r_option="nonlinear"\n')
f.write(' N_phi = 61\n')
f.write(' order_r_option="'+order_r_option+'"\n')
f.write(' nfp = '+str(nfp)+'\n')
f.write(' eta_bar = {:.15g}\n'.format(scan_eta_bar[index]))
f.write(' sigma_initial = {:.15g}\n'.format(scan_sigma_initial[index]))
if order_r_option=='r2':
    f.write(' B2s = {:.15g}\n'.format(scan_B2s[index]))
    f.write(' B2c = {:.15g}\n'.format(scan_B2c[index]))
    f.write(' r = {:.15g}\n'.format(r_singularities[index]))
else:
    f.write(' r = 0.1\n')
f.write(' R0s =')
for j in range(axis_nmax_plus_1):
    f.write(" {:.15g}".format(R0s[j,index]))
f.write('\n')
f.write(' R0c =')
for j in range(axis_nmax_plus_1):
    f.write(" {:.15g}".format(R0c[j,index]))
f.write('\n')
f.write(' Z0s =')
for j in range(axis_nmax_plus_1):
    f.write(" {:.15g}".format(Z0s[j,index]))
f.write('\n')
f.write(' Z0c =')
for j in range(axis_nmax_plus_1):
    f.write(" {:.15g}".format(Z0c[j,index]))
f.write('\n')
f.write(' vmec_template_filename = "input.li383_vacuum"\n')
f.write('/\n')
f.close()
