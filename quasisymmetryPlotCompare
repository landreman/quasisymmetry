#!/usr/bin/env python

import numpy as np
from scipy.io import netcdf
import sys, os

print "Usage: "+__file__+" <1 or more quasisymmetry_out.*.nc files>"

if len(sys.argv) < 2:
    print "Error! You must specify at least 1 quasisymmetry_out.*.nc file as an argument."
    exit(1)

filenames = []
Rs = []
zs = []

N_theta = 50
N_phi = 4

for which_file in range(len(sys.argv)-1):
    filename = sys.argv[which_file+1]
    print "Reading filename "+filename
    filenames.append(filename)
    f = netcdf.netcdf_file(filename,mode='r',mmap=False)
    general_option = str(f.variables['general_option'][()])
    if general_option.strip()=="scan":
        print "Error! This script is designed for plotting single runs, but the quasisymmetry_out file you provided is a scan."
        f.close()
        exit(1)

    nfp = f.variables['nfp'][()]
    if which_file==0:
        first_nfp = nfp
        theta = np.linspace(0,2*np.pi,N_theta)
        phi = np.linspace(0,2*np.pi/nfp,N_phi,endpoint=False)
        phi2D,theta2D = np.meshgrid(phi,theta)
    else:
        if nfp != first_nfp:
            print "Error! nfp must be the same for all files being compared."
            exit(1)
    mpol = f.variables['mpol'][()]
    ntor = f.variables['ntor'][()]
    RBC = f.variables['RBC'][()]
    RBS = f.variables['RBS'][()]
    ZBC = f.variables['ZBC'][()]
    ZBS = f.variables['ZBS'][()]
    print "RBC.shape:",RBC.shape

    f.close()


    R = np.zeros((N_theta,N_phi))
    z = np.zeros((N_theta,N_phi))
    for m in range(mpol+1):
        for jn in range(ntor*2+1):
            n = jn-ntor
            angle = m * theta2D - nfp * n * phi2D
            sinangle = np.sin(angle)
            cosangle = np.cos(angle)
            R += RBC[m,jn] * cosangle + RBS[m,jn] * sinangle
            z += ZBC[m,jn] * cosangle + ZBS[m,jn] * sinangle
    Rs.append(R)
    zs.append(z)

#exit(0)

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numRows = 2
numCols = 2

#plt.subplot(numRows,numCols,1)
#for jphi in range(4):
#    plt.plot(R[:,jphi],z[:,jphi])
#plt.xlabel('R')
#plt.ylabel('z')
#plt.gca().set_aspect('equal',adjustable='box')

for jphi in range(4):
    plt.subplot(numRows,numCols,jphi+1)
    for which_file in range(len(filenames)):
        plt.plot(Rs[which_file][:,jphi],zs[which_file][:,jphi],label=filenames[which_file])
    plt.xlabel('R')
    plt.ylabel('z')
    plt.gca().set_aspect('equal',adjustable='box')
    if jphi==1:
        plt.legend(loc=0,fontsize=6)


plt.tight_layout()

titleString = "Plot generated by "+ os.path.abspath(__file__)
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom',fontsize=8)
#plt.figtext(0.5,0.99,'File = '+filename,horizontalalignment='center',verticalalignment='top',fontsize=10)

plt.show()
