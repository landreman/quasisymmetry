#!/usr/bin/env python

import numpy as np
from scipy.io import netcdf
import sys, os

print "Usage: "+__file__+" quasisymmetry_out.*.nc"

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the quasisymmetry_out.*.nc file"
    exit(1)

filename = sys.argv[1]
print "Reading filename "+filename
f = netcdf.netcdf_file(filename,mode='r',mmap=False)
general_option = str(f.variables['general_option'][()])
if general_option.strip()=="scan":
    print "Error! This script is designed for plotting single runs, but the quasisymmetry_out file you provided is a scan."
    f.close()
    exit(1)

nfp = f.variables['nfp'][()]
mpol = f.variables['mpol'][()]
ntor = f.variables['ntor'][()]
RBC = f.variables['RBC'][()]
RBS = f.variables['RBS'][()]
ZBC = f.variables['ZBC'][()]
ZBS = f.variables['ZBS'][()]
print "RBC.shape:",RBC.shape

f.close()

N_theta = 50
N_phi = 4

theta = np.linspace(0,2*np.pi,N_theta)
phi = np.linspace(0,2*np.pi/nfp,N_phi,endpoint=False)

phi2D,theta2D = np.meshgrid(phi,theta)
#print "theta2D:"
#print theta2D

R = np.zeros((N_theta,N_phi))
z = np.zeros((N_theta,N_phi))
for m in range(mpol+1):
    for jn in range(ntor*2+1):
        n = jn-ntor
        angle = m * theta2D - nfp * n * phi2D
        sinangle = np.sin(angle)
        cosangle = np.cos(angle)
        R += RBC[m,jn] * cosangle + RBS[m,jn] * sinangle
        z += ZBC[m,jn] * cosangle + ZBS[m,jn] * sinangle

#exit(0)

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numRows = 2
numCols = 2

plt.subplot(numRows,numCols,1)
for jphi in range(4):
    plt.plot(R[:,jphi],z[:,jphi])
plt.xlabel('R')
plt.ylabel('z')
plt.gca().set_aspect('equal',adjustable='box')

for jphi in range(3):
    plt.subplot(numRows,numCols,jphi+2)
    plt.plot(R[:,jphi],z[:,jphi])
    plt.xlabel('R')
    plt.ylabel('z')
    plt.gca().set_aspect('equal',adjustable='box')


plt.tight_layout()

titleString = "Plot generated by "+ os.path.abspath(__file__)
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom',fontsize=8)
plt.figtext(0.5,0.99,'File = '+filename,horizontalalignment='center',verticalalignment='top',fontsize=10)

plt.show()
