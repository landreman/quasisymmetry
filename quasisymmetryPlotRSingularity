#!/usr/bin/env python3

import numpy as np
from scipy.io import netcdf
import sys, os

print()
print("Usage: "+__file__+" quasisymmetry_out.*.nc")

if len(sys.argv) != 2:
    print("Error! You must specify 1 argument: the quasisymmetry_out.*.nc file")
    exit(1)

def toString(ncVar):
    temp = [c.decode('UTF-8') for c in ncVar]
    return (''.join(temp)).strip()

filename = sys.argv[1]
print("Reading filename "+filename)
f = netcdf.netcdf_file(filename,mode='r',mmap=False)
general_option = toString(f.variables['general_option'][()])
if general_option != "single":
    print("Error! This script is designed for plotting single runs, but the quasisymmetry_out file you provided is a scan.")
    f.close()
    exit(1)

nfp = f.variables['nfp'][()]
B0 = f.variables['B0'][()]
r = f.variables['r'][()]
eta_bar = f.variables['eta_bar'][()]
mpol = f.variables['mpol'][()]
ntor = f.variables['ntor'][()]
RBC = f.variables['RBC'][()]
RBS = f.variables['RBS'][()]
ZBC = f.variables['ZBC'][()]
ZBS = f.variables['ZBS'][()]
R0c = f.variables['R0c'][()]
R0s = f.variables['R0s'][()]
Z0c = f.variables['Z0c'][()]
Z0s = f.variables['Z0s'][()]
print("RBC.shape:",RBC.shape)

phi = f.variables['phi'][()]
N_phi = len(phi)
X1c = f.variables['X1c'][()]
Y1c = f.variables['Y1c'][()]
Y1s = f.variables['Y1s'][()]
sigma = f.variables['sigma'][()]
curvature = f.variables['curvature'][()]
torsion = f.variables['torsion'][()]
elongation = f.variables['elongation'][()]
elongation_in_Rz_plane = f.variables['elongation_in_Rz_plane'][()]
modBinv_sqrt_half_grad_B_colon_grad_B = f.variables['modBinv_sqrt_half_grad_B_colon_grad_B'][()]

#order_r_option = f.variables["order_r_option"][()]
#order_r_option = ''.join(str(f.variables["order_r_option"][()]))
order_r_option = toString(f.variables["order_r_option"][()])
print("order_r_option:",order_r_option)
order_r_squared = (order_r_option != 'r1' and order_r_option != 'r1_compute_B2')
print("order_r_squared:",order_r_squared)
order_r_cubed = (order_r_option != 'r1' and order_r_option != 'r1_compute_B2' and order_r_option != 'r2')
print("order_r_cubed:",order_r_cubed)
order_r1_compute_B2 = order_r_option == 'r1_compute_B2'

if order_r1_compute_B2:
    B20 = f.variables['B20'][()]
    B2s_array = f.variables['B2s_array'][()]
    B2c_array = f.variables['B2c_array'][()]
    B02 = f.variables['B02'][()]

if order_r_squared:
    B2s = f.variables['B2s'][()]
    B2c = f.variables['B2c'][()]
    B20_mean = f.variables['B20_mean'][()]
    B20 = f.variables['B20'][()]
    X20 = f.variables['X20'][()]
    X2s = f.variables['X2s'][()]
    X2c = f.variables['X2c'][()]
    Y20 = f.variables['Y20'][()]
    Y2s = f.variables['Y2s'][()]
    Y2c = f.variables['Y2c'][()]
    Z20 = f.variables['Z20'][()]
    Z2s = f.variables['Z2s'][()]
    Z2c = f.variables['Z2c'][()]
    r_singularity_vs_zeta = f.variables['r_singularity_vs_zeta'][()]
    try:
        r_singularity_basic_vs_zeta = f.variables['r_singularity_basic_vs_zeta'][()]
        r_singularity_theta_vs_zeta = f.variables['r_singularity_theta_vs_zeta'][()]
        r_singularity_residual_sqnorm = f.variables['r_singularity_residual_sqnorm'][()]
    except:
        r_singularity_basic_vs_zeta = r_singularity_vs_zeta # Old output files might not have this field
        r_singularity_theta_vs_zeta = np.zeros(N_phi)
        r_singularity_residual_sqnorm = np.zeros(N_phi)
    for j in range(len(phi)):
        if r_singularity_vs_zeta[j] > 1.0e10:
            r_singularity_vs_zeta[j] = np.nan
        if r_singularity_basic_vs_zeta[j] > 1.0e10:
            r_singularity_basic_vs_zeta[j] = np.nan

if order_r_cubed:
    X3s1 = f.variables['X3s1'][()]
    X3c1 = f.variables['X3c1'][()]
    X3s3 = f.variables['X3s3'][()]
    X3c3 = f.variables['X3c3'][()]
    Y3s1 = f.variables['Y3s1'][()]
    Y3c1 = f.variables['Y3c1'][()]
    Y3s3 = f.variables['Y3s3'][()]
    Y3c3 = f.variables['Y3c3'][()]
    Z3s1 = f.variables['Z3s1'][()]
    Z3c1 = f.variables['Z3c1'][()]
    Z3s3 = f.variables['Z3s3'][()]
    Z3c3 = f.variables['Z3c3'][()]
    try:
        B3s1 = f.variables['B3s1'][()]
        B3c1 = f.variables['B3c1'][()]
        B3s3 = f.variables['B3s3'][()]
        B3c3 = f.variables['B3c3'][()]
    except:
        B3s1 = phi * 0
        B3s3 = phi * 0
        B3c1 = phi * 0
        B3c3 = phi * 0

f.close()

my_xlim = [0,phi[-1]]

N_theta = 150
N_phi = 4

theta1D = np.linspace(0,2*np.pi,N_theta)
phi1D = np.linspace(0,2*np.pi/nfp,N_phi,endpoint=False)

phi2D,theta2D = np.meshgrid(phi1D,theta1D)
#print "theta2D:"
#print theta2D

R = np.zeros((N_theta,N_phi))
z = np.zeros((N_theta,N_phi))
for m in range(mpol+1):
    for jn in range(ntor*2+1):
        n = jn-ntor
        angle = m * theta2D - nfp * n * phi2D
        sinangle = np.sin(angle)
        cosangle = np.cos(angle)
        R += RBC[m,jn] * cosangle + RBS[m,jn] * sinangle
        z += ZBC[m,jn] * cosangle + ZBS[m,jn] * sinangle

R0 = np.zeros(N_phi)
z0 = np.zeros(N_phi)
for n in range(len(R0c)):
    angle = nfp * n * phi1D
    sinangle = np.sin(angle)
    cosangle = np.cos(angle)
    R0 += R0c[n] * cosangle + R0s[n] * sinangle
    z0 += Z0c[n] * cosangle + Z0s[n] * sinangle

#exit(0)

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numRows=2
numCols=2
plotNum = 1

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(phi,r_singularity_vs_zeta,label='refined')
plt.plot(phi,r_singularity_basic_vs_zeta,':k',label='unrefined')
plt.legend(fontsize=6,loc=0)
plt.title('r_singularity_vs_zeta')
plt.xlabel('$\phi$')
plt.xlim(my_xlim)

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.semilogy(phi,r_singularity_residual_sqnorm)
plt.title('r_singularity_residual_sqnorm')
plt.xlabel('$\phi$')
plt.xlim(my_xlim)

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.semilogy(phi,np.abs(r_singularity_basic_vs_zeta - r_singularity_vs_zeta))
plt.title('Difference: |r_singularity_basic_vs_zeta - r_singularity_vs_zeta|')
plt.xlabel('$\phi$')
plt.xlim(my_xlim)

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(phi,r_singularity_theta_vs_zeta)
plt.title('r_singularity_theta_vs_zeta')
plt.xlabel('$\phi$')
plt.xlim(my_xlim)

plt.tight_layout()

plt.show()
